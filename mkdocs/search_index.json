{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\n\n\nPerforms automated OSINT on a domain / email / username / IP and find out relevant information from different sources. \n\n\nEasy to contribute OSINT Framework. \n\n\nCode for Banner, Main and Output function. Datasploit automagically do rest of the things for you.\n\n\nUseful for Pen-testers, Bug Bounty Hunters, Cyber Investigators, Product companies, Security Engineers, etc.\n\n\nCollaborate the results, show them in a consolidated manner. \n\n\nTries to find out credentials, api-keys, tokens, subdomains, domain history, legacy portals, usernames, dumped accounts, etc. related to the target.\n\n\nCan be used as library, automated scripts or standalone scripts. \n\n\nCan generate lists which can be feeded to active scan tools.\n\n\nGenerates HTML, along with text files.  \n\n\n\n\nWhy DataSploit???\n\n\nIrrespective of whether you are attacking a target or defending one, you need to have a clear picture of the threat landscape before you get in. This is where DataSploit comes into the picture. Utilizing various Open Source Intelligence (OSINT) tools and techniques that we have found to be effective, DataSploit brings them all into one place, correlates the raw data captured and gives the user, all the relevant information about the domain / email / IP / person, etc. It allows you to collect relevant information about a target which can expand your attack/defence surface very quickly. Sometimes it might even pluck the low hanging fruits for you without even touching the target and give you quick wins. Of course, a user can pick a single small job (which do not correlates obviously), or can pick up the parent search which will launch a bunch of queries, call other required scripts recursively, correlate the data and give you all juicy information in one go.\n\n\nTool Background\n\n\nCreated using our beloved Python, DataSploit simply requires the bare minimum data (such as domain name, email ID, person name, etc.) before it goes out on a mining spree. Once the data is collected, firstly the noise is removed, after which data is correlated and after multiple iterations it is stored locally in a database which could be easily visualised on the UI provided. The sources that have been integrated are all hand picked and are known to be providing reliable information. We have used them previously during different offensive as well as defensive engagements and found them helpful.\n\n\nApart from being a tool, DataSploit is an easy to use OSINT framework where people can contribute other modules and help the community with cutting edge researches. \nPeople can either write modules for DataSploit or can simpley import datasploit as library and write their own tools.\n\n\nSetup\n\n\nWorried about setup? We got you. You should be worried about two things:\n\n\n\n\nInstall the required python dependencies. Either use requirements.txt or simpley pip install datasploit. \n\n\nFeeding specific API keys for few specific sources. We are going to have a knowledge base where step by step instructions to generate these API keys will be documented. Sweet deal? \n\n\nClick here to check step by step setup guide\n\n\n\n\nRoadmap\n\n\n\n\nWhile focusing on new modules, we didnt paid much attention to Exception handling. This is something we are keen to work on. Any contibutors? We already love you. \n\n\nApart from this, in order to make it more useful in daily life of a pen-tester, we are working to active scripts which can get data from datasploit and use the OSINT data agregated from multiple sources.", 
            "title": "Overview"
        }, 
        {
            "location": "/#overview", 
            "text": "Performs automated OSINT on a domain / email / username / IP and find out relevant information from different sources.   Easy to contribute OSINT Framework.   Code for Banner, Main and Output function. Datasploit automagically do rest of the things for you.  Useful for Pen-testers, Bug Bounty Hunters, Cyber Investigators, Product companies, Security Engineers, etc.  Collaborate the results, show them in a consolidated manner.   Tries to find out credentials, api-keys, tokens, subdomains, domain history, legacy portals, usernames, dumped accounts, etc. related to the target.  Can be used as library, automated scripts or standalone scripts.   Can generate lists which can be feeded to active scan tools.  Generates HTML, along with text files.", 
            "title": "Overview"
        }, 
        {
            "location": "/#why-datasploit", 
            "text": "Irrespective of whether you are attacking a target or defending one, you need to have a clear picture of the threat landscape before you get in. This is where DataSploit comes into the picture. Utilizing various Open Source Intelligence (OSINT) tools and techniques that we have found to be effective, DataSploit brings them all into one place, correlates the raw data captured and gives the user, all the relevant information about the domain / email / IP / person, etc. It allows you to collect relevant information about a target which can expand your attack/defence surface very quickly. Sometimes it might even pluck the low hanging fruits for you without even touching the target and give you quick wins. Of course, a user can pick a single small job (which do not correlates obviously), or can pick up the parent search which will launch a bunch of queries, call other required scripts recursively, correlate the data and give you all juicy information in one go.", 
            "title": "Why DataSploit???"
        }, 
        {
            "location": "/#tool-background", 
            "text": "Created using our beloved Python, DataSploit simply requires the bare minimum data (such as domain name, email ID, person name, etc.) before it goes out on a mining spree. Once the data is collected, firstly the noise is removed, after which data is correlated and after multiple iterations it is stored locally in a database which could be easily visualised on the UI provided. The sources that have been integrated are all hand picked and are known to be providing reliable information. We have used them previously during different offensive as well as defensive engagements and found them helpful.  Apart from being a tool, DataSploit is an easy to use OSINT framework where people can contribute other modules and help the community with cutting edge researches. \nPeople can either write modules for DataSploit or can simpley import datasploit as library and write their own tools.", 
            "title": "Tool Background"
        }, 
        {
            "location": "/#setup", 
            "text": "Worried about setup? We got you. You should be worried about two things:   Install the required python dependencies. Either use requirements.txt or simpley pip install datasploit.   Feeding specific API keys for few specific sources. We are going to have a knowledge base where step by step instructions to generate these API keys will be documented. Sweet deal?   Click here to check step by step setup guide", 
            "title": "Setup"
        }, 
        {
            "location": "/#roadmap", 
            "text": "While focusing on new modules, we didnt paid much attention to Exception handling. This is something we are keen to work on. Any contibutors? We already love you.   Apart from this, in order to make it more useful in daily life of a pen-tester, we are working to active scripts which can get data from datasploit and use the OSINT data agregated from multiple sources.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/setupGuide/", 
            "text": "dataSploit as a Framework / Tool\n\n\ndataSploit is now available as a framework and can be used in 2 ways, either as a library such that it can be incorporated into other projects or as a standalone tool. Given below are the methods to install and use dataSploit in the mentioned 2 ways.\n\n\n1. Set it up as a Library\n\n\ndataSploit is now available on the \npypi repository\n for easy installation using pip. If you're a developer looking for a way to leverage the capabilities of dataSploit in your own projects, this method is probably the way to go for you. To use dataSploit as a library to incorporate in your own projects, please follow the below instructions to set it up.\n\n\n# pip install datasploit\n\n\n\n\nThis command does all the work for you. It even installs the dependencies for dataSploit in your python environment. Once dataSploit is installed successfully, you need to edit the config file to add your own API keys. Simply run the below command to open up the config file in a vi editor. The below command is the gateway to edit the config file.\n\n\n# datasploit_config\n\n\n\n\nNow dataSploit is ready and can be used in any python project as a library. Following is a sample code:\n\n\n import datasploit\n\n data = datasploit.username.username_gitscrape.main(\nusername\n)\n\n datasploit.username.username_gitscrape.output(data)\n[+] Found 1 repos for username\n\n1. Username/TestData (3 commits)\n        0913e1678e94456487c4c67288714511cbf2f9db\n        0f67ed38c0cd2e87f508724b9744932db3e8c6ac\n        b22997c0a4eb09a2b177ace811e55bea3b006df8\n\n\n from datasploit.emails import email_basic_checks\n\n data = email_basic_checks.main(\ninfo@google.com\n)\n\n print data\n{u'free': False, u'domain': u'google.com', u'disposable': False, u'format_valid': True, u'did_you_mean': u'', u'catch_all': None, u'score': 0.8, u'role': True, u'user': u'info', u'smtp_check': True, u'email': u'info@google.com', u'mx_found': True}\n\n email_basic_checks.output(data)\nIs it a free Email Address?: No\nEmail ID Exist?:  Yes\nCan this domain recieve emails?:  Yes\nIs it a Disposable email?:  No\n\n\n\n\n2. Set it up as a Standalone Tool\n\n\nIf you're looking to use dataSploit quickly for scavenging information, you can simply run it as a standalone tool. Follow the below commands to set it up.\n\n\n# git clone https://github.com/datasploit/datasploit /etc/datasploit\n# cd /etc/datasploit/\n# pip install -r requirements.txt\n# mv config_sample.py config.py\n# vi config.py\n\n\n\n\nThe steps mentioned above are all that is required to get dataSploit up and running. Once done, following is the sample usage of different modules or dataSploit as a whole.\n\n\n# python datasploit.py test.com\n           ____/ /____ _ / /_ ____ _ _____ ____   / /____   (_)/ /_\n          / __  // __ `// __// __ `// ___// __ \\ / // __ \\ / // __/\n         / /_/ // /_/ // /_ / /_/ /(__  )/ /_/ // // /_/ // // /_\n         \\__,_/ \\__,_/ \\__/ \\__,_//____// .___//_/ \\____//_/ \\__/\n                                       /_/\n\n                    Open Source Assistant for #OSINT\n                      Website: www.datasploit.info\n\nUser Input: test.com\nLooks like a DOMAIN, running domainOsint...\n\n---\n Trying luck with PunkSpider\n\n[-] No Vulnerabilities found on PunkSpider\n\n\n---\n Harvesting Email Addresses:.\n\nsales@test.com\njohn.test@test.com\nrecipient@test.com\nalice@test.com\nsomeone@test.com\nanonymous@test.com\nsample@test.com\n...\n\n\n# python emails/email_basic_checks.py info@google.com\n\n---\n Basic Email Check(s)..\n\nIs it a free Email Address?: No\nEmail ID Exist?:  Yes\nCan this domain recieve emails?:  Yes\nIs it a Disposable email?:  No\n\n# python username/username_gitscrape.py username\n\n[+] Scraping Git for Repos and Commits\n\n[+] Found 1 repos for username username\n\n1. KunalAggarwal/TestData (3 commits)\n        0913e1678e94456487c4c67288714511cbf2f9db\n        0f67ed38c0cd2e87f508724b9744932db3e8c6ac\n        b22997c0a4eb09a2b177ace811e55bea3b006df8\n\n\n\n\n\nThat's it. dataSploit is now setup and ready to go. Both methods of installation provide flexibilty to all types of users to leverage the modules of dataSploit as needed.", 
            "title": "Setting up the Environment"
        }, 
        {
            "location": "/setupGuide/#datasploit-as-a-framework-tool", 
            "text": "dataSploit is now available as a framework and can be used in 2 ways, either as a library such that it can be incorporated into other projects or as a standalone tool. Given below are the methods to install and use dataSploit in the mentioned 2 ways.", 
            "title": "dataSploit as a Framework / Tool"
        }, 
        {
            "location": "/setupGuide/#1-set-it-up-as-a-library", 
            "text": "dataSploit is now available on the  pypi repository  for easy installation using pip. If you're a developer looking for a way to leverage the capabilities of dataSploit in your own projects, this method is probably the way to go for you. To use dataSploit as a library to incorporate in your own projects, please follow the below instructions to set it up.  # pip install datasploit  This command does all the work for you. It even installs the dependencies for dataSploit in your python environment. Once dataSploit is installed successfully, you need to edit the config file to add your own API keys. Simply run the below command to open up the config file in a vi editor. The below command is the gateway to edit the config file.  # datasploit_config  Now dataSploit is ready and can be used in any python project as a library. Following is a sample code:   import datasploit  data = datasploit.username.username_gitscrape.main( username )  datasploit.username.username_gitscrape.output(data)\n[+] Found 1 repos for username\n\n1. Username/TestData (3 commits)\n        0913e1678e94456487c4c67288714511cbf2f9db\n        0f67ed38c0cd2e87f508724b9744932db3e8c6ac\n        b22997c0a4eb09a2b177ace811e55bea3b006df8  from datasploit.emails import email_basic_checks  data = email_basic_checks.main( info@google.com )  print data\n{u'free': False, u'domain': u'google.com', u'disposable': False, u'format_valid': True, u'did_you_mean': u'', u'catch_all': None, u'score': 0.8, u'role': True, u'user': u'info', u'smtp_check': True, u'email': u'info@google.com', u'mx_found': True}  email_basic_checks.output(data)\nIs it a free Email Address?: No\nEmail ID Exist?:  Yes\nCan this domain recieve emails?:  Yes\nIs it a Disposable email?:  No", 
            "title": "1. Set it up as a Library"
        }, 
        {
            "location": "/setupGuide/#2-set-it-up-as-a-standalone-tool", 
            "text": "If you're looking to use dataSploit quickly for scavenging information, you can simply run it as a standalone tool. Follow the below commands to set it up.  # git clone https://github.com/datasploit/datasploit /etc/datasploit\n# cd /etc/datasploit/\n# pip install -r requirements.txt\n# mv config_sample.py config.py\n# vi config.py  The steps mentioned above are all that is required to get dataSploit up and running. Once done, following is the sample usage of different modules or dataSploit as a whole.  # python datasploit.py test.com\n           ____/ /____ _ / /_ ____ _ _____ ____   / /____   (_)/ /_\n          / __  // __ `// __// __ `// ___// __ \\ / // __ \\ / // __/\n         / /_/ // /_/ // /_ / /_/ /(__  )/ /_/ // // /_/ // // /_\n         \\__,_/ \\__,_/ \\__/ \\__,_//____// .___//_/ \\____//_/ \\__/\n                                       /_/\n\n                    Open Source Assistant for #OSINT\n                      Website: www.datasploit.info\n\nUser Input: test.com\nLooks like a DOMAIN, running domainOsint...\n\n---  Trying luck with PunkSpider\n\n[-] No Vulnerabilities found on PunkSpider\n\n\n---  Harvesting Email Addresses:.\n\nsales@test.com\njohn.test@test.com\nrecipient@test.com\nalice@test.com\nsomeone@test.com\nanonymous@test.com\nsample@test.com\n...\n\n\n# python emails/email_basic_checks.py info@google.com\n\n---  Basic Email Check(s)..\n\nIs it a free Email Address?: No\nEmail ID Exist?:  Yes\nCan this domain recieve emails?:  Yes\nIs it a Disposable email?:  No\n\n# python username/username_gitscrape.py username\n\n[+] Scraping Git for Repos and Commits\n\n[+] Found 1 repos for username username\n\n1. KunalAggarwal/TestData (3 commits)\n        0913e1678e94456487c4c67288714511cbf2f9db\n        0f67ed38c0cd2e87f508724b9744932db3e8c6ac\n        b22997c0a4eb09a2b177ace811e55bea3b006df8  That's it. dataSploit is now setup and ready to go. Both methods of installation provide flexibilty to all types of users to leverage the modules of dataSploit as needed.", 
            "title": "2. Set it up as a Standalone Tool"
        }, 
        {
            "location": "/Writing_Modules/", 
            "text": "Writing custom modules/scripts for dataSploit\n\n\ndataSploit has been made with a modular approach in mind. We wanted to make things simple for even a novice user to understand. Thus, writing a new module is as simple as adding a new script to a module folder and that's it. dataSploit takes care of the rest. There are a few simple guidelines to follow when writing a new module/script. Please read the documentation below to get a better understanding of how dataSploit is structured.\n\n\nFollowing is the tree structure of a basic git clone of the dataSploit repository:\n\n\ndatasploit/\n\u251c\u2500\u2500 active_default_file_check.py\n\u251c\u2500\u2500 active_scan.py\n\u251c\u2500\u2500 base.html\n\u251c\u2500\u2500 check_urls.txt\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 contributors.txt\n\u251c\u2500\u2500 datasploit_config.py\n\u251c\u2500\u2500 datasploit.py\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 apiGeneration.md\n\u2502   \u251c\u2500\u2500 contributors.md\n\u2502   \u251c\u2500\u2500 home.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 setupGuide.md\n\u2502   \u2514\u2500\u2500 Usage.md\n\u251c\u2500\u2500 domain\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 domain_censys.py\n\u2502   \u251c\u2500\u2500 domain_checkpunkspider.py\n\u2502   \u251c\u2500\u2500 domain_dnsrecords.py\n\u2502   \u251c\u2500\u2500 domain_emailhunter.py\n\u2502   \u251c\u2500\u2500 domain_forumsearch.py\n\u2502   \u251c\u2500\u2500 domain_github.py\n\u2502   \u251c\u2500\u2500 domain_GooglePDF.py\n\u2502   \u251c\u2500\u2500 domain_history.py\n\u2502   \u251c\u2500\u2500 domain_pagelinks.py\n\u2502   \u251c\u2500\u2500 domain_pastes.py\n\u2502   \u251c\u2500\u2500 domain_shodan.py\n\u2502   \u251c\u2500\u2500 domain_subdomains.py\n\u2502   \u251c\u2500\u2500 domain_wappalyzer.py\n\u2502   \u251c\u2500\u2500 domain_whois.py\n\u2502   \u251c\u2500\u2500 domain_wikileaks.py\n\u2502   \u251c\u2500\u2500 domain_zoomeye.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 template.py\n\u251c\u2500\u2500 domainOsint.py\n\u251c\u2500\u2500 emailOsint.py\n\u251c\u2500\u2500 emails\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 email_basic_checks.py\n\u2502   \u251c\u2500\u2500 email_clearbit.py\n\u2502   \u251c\u2500\u2500 email_fullcontact.py\n\u2502   \u251c\u2500\u2500 email_haveibeenpwned.py\n\u2502   \u251c\u2500\u2500 email_pastes.py\n\u2502   \u251c\u2500\u2500 email_scribd.py\n\u2502   \u251c\u2500\u2500 email_slideshare.py\n\u2502   \u251c\u2500\u2500 email_whoismind.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 template.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 ip\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 ip_shodan.py\n\u2502   \u251c\u2500\u2500 ip_virustotal.py\n\u2502   \u251c\u2500\u2500 ip_whois.py\n\u2502   \u2514\u2500\u2500 template.py\n\u251c\u2500\u2500 ipOsint.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 osint_runner.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 reports\n\u2502   \u2514\u2500\u2500 README\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 roadmap.txt\n\u251c\u2500\u2500 username\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 template.py\n\u2502   \u251c\u2500\u2500 username_gitscrape.py\n\u2502   \u251c\u2500\u2500 username_gituserdetails.py\n\u2502   \u251c\u2500\u2500 username_keybase.py\n\u2502   \u251c\u2500\u2500 username_profilepic.py\n\u2502   \u251c\u2500\u2500 username_twitterdetails.py\n\u2502   \u2514\u2500\u2500 username_usernamesearch.py\n\u2514\u2500\u2500 usernameOsint.py\n\n\n\n\nOut of the box, 4 main modules have been provided, as can be seen from the tree structure above, namely:\n\n\n\n\ndomain\n\n\nemails\n\n\nip\n\n\nusername\n\n\n\n\nEach of these folder houses scripts of it's own kind, i.e., scripts working on domain name as input are located in the domain folder and so on. You may have also noticed, each script in a module has a naming convention, i.e., a common prefix followed by an underscore and followed by the script name (e.g., domain_shodan.py). Please note this is required to be followed when adding a new script to the module. This way, dataSploit can dynamically pick up the script at runtime when triggered from the module's Osint script. \n\n\nWriting a new script for an existing module\n\n\nTo write a new script for a module, there is a \ntemplate.py\n located in each module directory to help you get started quickly. Following is the contents of the template.py file in the domain module:\n\n\n#!/usr/bin/env python\n\nimport base\nimport config as cfg\nimport sys\n\n# Control whether the module is enabled or not\nENABLED = True\n\n\ndef banner():\n    # Write a cool banner here\n    pass\n\n\ndef main(domain):\n    # Use the domain variable to do some stuff and return the data\n    print domain\n    return []\n\n\ndef output(data, domain=\n):\n    # Use the data variable to print out to console as you like\n    for i in data:\n        print i\n\n\nif __name__ == \n__main__\n:\n    try:\n        domain = sys.argv[1]\n        banner()\n        result = main(domain)\n        output(result, domain)\n    except Exception as e:\n        print e\n        print \nPlease provide a domain name as argument\n\n\n\n\n\nIn short there are 3 functions that need to be implemented for a script:\n\n\n\n\n\n\ndef banner()\n\n    This function is an optional implementation, used only to print out the banner at the start of the script when executed as standalone tool.\n\n\n\n\n\n\ndef main(input)\n\n    This function is a mandatory implementation. The parameter input to this function is what is passed as command line argument to the scripts. All data processing needs to be done in this function and it needs to return the data from this function. Please note, it is advised not to output anything in this function. The return value from here gets passed onto the next function for display.\n\n\n\n\n\n\ndef output(data, input=\"\")\n\n    This function is another mandatory implementation. It is used to handle how the data returned by the main function above is to be rendered on the console. The parameter data is the returned data from the mail function. The parameter input is an optional parameter and holds the value of the command line argument passed to the script. \n\n\n\n\n\n\nThere is also another important variable in the script towards the top named \nENABLED\n. By default, even in the template ENABLED is set to True. This variable can be used like a switch to control whether the script gets picked up for execution when running using either the parent datasploit.py script or either one of the Osint.py scripts.\n\n\nOnce you are done with modifying the template.py file and finalizing your code, you need to simply rename the file using the predefined format, i.e., the module prefix then an underscore and then the script name. For example, writing a new script for the domain module, the file needs to be renamed as \ndomain_scriptname.py\n. Once this is done, the script will get automatically picked by datasploit.py or domainOsint.py.\n\n\nAdding a new module to dataSploit\n\n\nAdding a new module is also pretty straight forward. For example, let's say we want to add a module named mobile to dataSploit. Given below are the steps to add a new module.\n\n\n\n\n\n\nCreate a directory in the datasploit folder named mobile and move to the newly created directory.\n\n\nbash\nmkdir mobile\ncd mobile\n\n\n\n\n\n\nIn this new directory, create a file named \nbase.py\n\n\nbash         \ntouch base.py\nvi base.py\n\n\nAnd add the following contents to the file  \n\n\n```python\nimport sys\nimport os\n\n\ndir_path = os.path.dirname(os.path.dirname(os.path.realpath(\nfile\n)))\nsys.path.insert(0, dir_path)\n```\n\n\n\n\n\n\nAlso in the same directory, create another file called \n__init__.py\n. This might be a good time to decide a prefix that will be used to name scripts in this module, for this document purpose we'll be picking the prefix name mobile.\n\n\nbash\ntouch __init__.py\nvi __init__.py\n\n\nAnd add the following contents to the file:\n\n\n```python\nfrom os.path import dirname, basename, isfile, abspath\nimport glob, importlib, sys\n\n\nmodules = glob.glob(dirname(\nfile\n) + \"/mobile_*.py\")\n\nall\n = [basename(f)[:-3] for f in modules if isfile(f)]\nsys.path.append(dirname(abspath(\nfile\n)))\n\n\nfor m in \nall\n:\n        \nimport\n(m, locals(), globals())\ndel m, f, dirname, basename, isfile, abspath, glob, importlib, sys, modules\n```\n\n\nPlease note\n: Line number 4:\n\n\npython\nmodules = glob.glob(dirname(__file__) + \"/mobile_*.py\")\n\n\nThis is where the prefix of the script name comes into play. Please change this accordingly to whatever prefix you decide.\n\n\n\n\n\n\nAssuming you're in the mobile folder created above, go one level up to the datasploit folder and create a file called \nmobileOsint.py\n. This script will be used to execute all scripts in the module mobile as a consolidated package.\n\n\nbash\ncd ..\ntouch mobileOsint.py\nvi mobileOsint.py\n\n\nAdd the following contents to the file.\n\n\n```python\n\n\n!/usr/bin/env python\n\n\nimport sys\nimport osint_runner\n\n\ndef run(email):\n    osint_runner.run(\"mobile\", \"mobile\", mobile)\n\n\nif \nname\n == \"\nmain\n\":\n    mobile = sys.argv[1]\n    run(mobile)\n```\n\n\nTake note of the osint_runner.run() function inside the run function. The first parameter is the prefix name of the scripts. The second parameter is the name of the module directory. \nScripts can be added to this folder as mentioned in the guide above to create new script for an existing module.\n\n\n\n\n\n\nThe last step is adding the newly created module to the datasploit.py script. For that, simply edit the datasploit.py file and first add an import to the top:\n\n\npython\nimport mobileOsint\n\n\nThen in the main function, add the handler to identify the user input and basis of that add the following line of code to call the mobileOsint module:\n\n\npython\nmobileOsint.run(user_input)\n\n\n\n\n\n\nThat's all. This configures the new mobile module to either run as a whole using the datasploit.py or mobileOsint.py file or as standalone scripts using the mobile_scriptname.py files inside the mobile folder.\n\n\nThe possibilities of extending dataSploit are endless. New modules and scripts are easily integrable as mentioned above. We look forward to seeing contribution from the community to help increase the capabilites of dataSploit.", 
            "title": "Writing a Module"
        }, 
        {
            "location": "/Writing_Modules/#writing-custom-modulesscripts-for-datasploit", 
            "text": "dataSploit has been made with a modular approach in mind. We wanted to make things simple for even a novice user to understand. Thus, writing a new module is as simple as adding a new script to a module folder and that's it. dataSploit takes care of the rest. There are a few simple guidelines to follow when writing a new module/script. Please read the documentation below to get a better understanding of how dataSploit is structured.  Following is the tree structure of a basic git clone of the dataSploit repository:  datasploit/\n\u251c\u2500\u2500 active_default_file_check.py\n\u251c\u2500\u2500 active_scan.py\n\u251c\u2500\u2500 base.html\n\u251c\u2500\u2500 check_urls.txt\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 contributors.txt\n\u251c\u2500\u2500 datasploit_config.py\n\u251c\u2500\u2500 datasploit.py\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 apiGeneration.md\n\u2502   \u251c\u2500\u2500 contributors.md\n\u2502   \u251c\u2500\u2500 home.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 setupGuide.md\n\u2502   \u2514\u2500\u2500 Usage.md\n\u251c\u2500\u2500 domain\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 domain_censys.py\n\u2502   \u251c\u2500\u2500 domain_checkpunkspider.py\n\u2502   \u251c\u2500\u2500 domain_dnsrecords.py\n\u2502   \u251c\u2500\u2500 domain_emailhunter.py\n\u2502   \u251c\u2500\u2500 domain_forumsearch.py\n\u2502   \u251c\u2500\u2500 domain_github.py\n\u2502   \u251c\u2500\u2500 domain_GooglePDF.py\n\u2502   \u251c\u2500\u2500 domain_history.py\n\u2502   \u251c\u2500\u2500 domain_pagelinks.py\n\u2502   \u251c\u2500\u2500 domain_pastes.py\n\u2502   \u251c\u2500\u2500 domain_shodan.py\n\u2502   \u251c\u2500\u2500 domain_subdomains.py\n\u2502   \u251c\u2500\u2500 domain_wappalyzer.py\n\u2502   \u251c\u2500\u2500 domain_whois.py\n\u2502   \u251c\u2500\u2500 domain_wikileaks.py\n\u2502   \u251c\u2500\u2500 domain_zoomeye.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 template.py\n\u251c\u2500\u2500 domainOsint.py\n\u251c\u2500\u2500 emailOsint.py\n\u251c\u2500\u2500 emails\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 email_basic_checks.py\n\u2502   \u251c\u2500\u2500 email_clearbit.py\n\u2502   \u251c\u2500\u2500 email_fullcontact.py\n\u2502   \u251c\u2500\u2500 email_haveibeenpwned.py\n\u2502   \u251c\u2500\u2500 email_pastes.py\n\u2502   \u251c\u2500\u2500 email_scribd.py\n\u2502   \u251c\u2500\u2500 email_slideshare.py\n\u2502   \u251c\u2500\u2500 email_whoismind.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 template.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 ip\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 ip_shodan.py\n\u2502   \u251c\u2500\u2500 ip_virustotal.py\n\u2502   \u251c\u2500\u2500 ip_whois.py\n\u2502   \u2514\u2500\u2500 template.py\n\u251c\u2500\u2500 ipOsint.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 osint_runner.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 reports\n\u2502   \u2514\u2500\u2500 README\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 roadmap.txt\n\u251c\u2500\u2500 username\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 template.py\n\u2502   \u251c\u2500\u2500 username_gitscrape.py\n\u2502   \u251c\u2500\u2500 username_gituserdetails.py\n\u2502   \u251c\u2500\u2500 username_keybase.py\n\u2502   \u251c\u2500\u2500 username_profilepic.py\n\u2502   \u251c\u2500\u2500 username_twitterdetails.py\n\u2502   \u2514\u2500\u2500 username_usernamesearch.py\n\u2514\u2500\u2500 usernameOsint.py  Out of the box, 4 main modules have been provided, as can be seen from the tree structure above, namely:   domain  emails  ip  username   Each of these folder houses scripts of it's own kind, i.e., scripts working on domain name as input are located in the domain folder and so on. You may have also noticed, each script in a module has a naming convention, i.e., a common prefix followed by an underscore and followed by the script name (e.g., domain_shodan.py). Please note this is required to be followed when adding a new script to the module. This way, dataSploit can dynamically pick up the script at runtime when triggered from the module's Osint script.", 
            "title": "Writing custom modules/scripts for dataSploit"
        }, 
        {
            "location": "/Writing_Modules/#writing-a-new-script-for-an-existing-module", 
            "text": "To write a new script for a module, there is a  template.py  located in each module directory to help you get started quickly. Following is the contents of the template.py file in the domain module:  #!/usr/bin/env python\n\nimport base\nimport config as cfg\nimport sys\n\n# Control whether the module is enabled or not\nENABLED = True\n\n\ndef banner():\n    # Write a cool banner here\n    pass\n\n\ndef main(domain):\n    # Use the domain variable to do some stuff and return the data\n    print domain\n    return []\n\n\ndef output(data, domain= ):\n    # Use the data variable to print out to console as you like\n    for i in data:\n        print i\n\n\nif __name__ ==  __main__ :\n    try:\n        domain = sys.argv[1]\n        banner()\n        result = main(domain)\n        output(result, domain)\n    except Exception as e:\n        print e\n        print  Please provide a domain name as argument   In short there are 3 functions that need to be implemented for a script:    def banner() \n    This function is an optional implementation, used only to print out the banner at the start of the script when executed as standalone tool.    def main(input) \n    This function is a mandatory implementation. The parameter input to this function is what is passed as command line argument to the scripts. All data processing needs to be done in this function and it needs to return the data from this function. Please note, it is advised not to output anything in this function. The return value from here gets passed onto the next function for display.    def output(data, input=\"\") \n    This function is another mandatory implementation. It is used to handle how the data returned by the main function above is to be rendered on the console. The parameter data is the returned data from the mail function. The parameter input is an optional parameter and holds the value of the command line argument passed to the script.     There is also another important variable in the script towards the top named  ENABLED . By default, even in the template ENABLED is set to True. This variable can be used like a switch to control whether the script gets picked up for execution when running using either the parent datasploit.py script or either one of the Osint.py scripts.  Once you are done with modifying the template.py file and finalizing your code, you need to simply rename the file using the predefined format, i.e., the module prefix then an underscore and then the script name. For example, writing a new script for the domain module, the file needs to be renamed as  domain_scriptname.py . Once this is done, the script will get automatically picked by datasploit.py or domainOsint.py.", 
            "title": "Writing a new script for an existing module"
        }, 
        {
            "location": "/Writing_Modules/#adding-a-new-module-to-datasploit", 
            "text": "Adding a new module is also pretty straight forward. For example, let's say we want to add a module named mobile to dataSploit. Given below are the steps to add a new module.    Create a directory in the datasploit folder named mobile and move to the newly created directory.  bash\nmkdir mobile\ncd mobile    In this new directory, create a file named  base.py  bash         \ntouch base.py\nvi base.py  And add the following contents to the file    ```python\nimport sys\nimport os  dir_path = os.path.dirname(os.path.dirname(os.path.realpath( file )))\nsys.path.insert(0, dir_path)\n```    Also in the same directory, create another file called  __init__.py . This might be a good time to decide a prefix that will be used to name scripts in this module, for this document purpose we'll be picking the prefix name mobile.  bash\ntouch __init__.py\nvi __init__.py  And add the following contents to the file:  ```python\nfrom os.path import dirname, basename, isfile, abspath\nimport glob, importlib, sys  modules = glob.glob(dirname( file ) + \"/mobile_*.py\") all  = [basename(f)[:-3] for f in modules if isfile(f)]\nsys.path.append(dirname(abspath( file )))  for m in  all :\n         import (m, locals(), globals())\ndel m, f, dirname, basename, isfile, abspath, glob, importlib, sys, modules\n```  Please note : Line number 4:  python\nmodules = glob.glob(dirname(__file__) + \"/mobile_*.py\")  This is where the prefix of the script name comes into play. Please change this accordingly to whatever prefix you decide.    Assuming you're in the mobile folder created above, go one level up to the datasploit folder and create a file called  mobileOsint.py . This script will be used to execute all scripts in the module mobile as a consolidated package.  bash\ncd ..\ntouch mobileOsint.py\nvi mobileOsint.py  Add the following contents to the file.  ```python", 
            "title": "Adding a new module to dataSploit"
        }, 
        {
            "location": "/Writing_Modules/#usrbinenv-python", 
            "text": "import sys\nimport osint_runner  def run(email):\n    osint_runner.run(\"mobile\", \"mobile\", mobile)  if  name  == \" main \":\n    mobile = sys.argv[1]\n    run(mobile)\n```  Take note of the osint_runner.run() function inside the run function. The first parameter is the prefix name of the scripts. The second parameter is the name of the module directory. \nScripts can be added to this folder as mentioned in the guide above to create new script for an existing module.    The last step is adding the newly created module to the datasploit.py script. For that, simply edit the datasploit.py file and first add an import to the top:  python\nimport mobileOsint  Then in the main function, add the handler to identify the user input and basis of that add the following line of code to call the mobileOsint module:  python\nmobileOsint.run(user_input)    That's all. This configures the new mobile module to either run as a whole using the datasploit.py or mobileOsint.py file or as standalone scripts using the mobile_scriptname.py files inside the mobile folder.  The possibilities of extending dataSploit are endless. New modules and scripts are easily integrable as mentioned above. We look forward to seeing contribution from the community to help increase the capabilites of dataSploit.", 
            "title": "!/usr/bin/env python"
        }, 
        {
            "location": "/apiGeneration/", 
            "text": "We need following API keys to run this tool efficiently:\n\n\nshodan_api, censysio_id, censysio_secret, zoomeyeuser, zoomeyepass, clearbit_apikey, emailhunter, fullcontact, google_cse_key, google_cse_cx, github_travis_key.\n\n\nShodan_api\n\n\n\n\nRegister\n an account in shodan.\n\n\nVisit your registered email id and activate the account.\n\n\nLogin\n to your account and you will find the API keys under profile overview tab.\n\n\nCopy the API key and this is the value for \nshodan_api\n field in the config.py file. \n\n\n\n\nCensysio ID and Secret\n\n\n\n\nRegister\n an account in censysio.\n\n\nVisit your registered email id and activate the account.\n\n\nLogin\n to your account.\n\n\nVisit \nAccount\n tab to get API ID and Secret.\n\n\nYour API key is the value for \ncensysio_id\n field and API Secret is the value for \ncensysio_secret\n field in config.py file.\n\n\n\n\nClearbit API\n\n\n\n\nRegister\n an account in clearbit.\n\n\nIt will auto redirect to the account.\n\n\nVisit \nAPI keys\n tab to get API key.\n\n\nCopy the API key and this is the value for \nclearbit_apikey\n field in the config.py file. \n\n\n\n\nEmailhunter API\n\n\n\n\nRegister\n an account in emailhunter.\n\n\nClick on activation link send to your registered email address and it will auto redirect to the account.\n\n\nVisit \nAPI keys\n tab to get API key.\n\n\nCopy the API key and this is the value for \nemailhunter\n field in the config.py file. \n\n\n\n\nFullcontact API\n\n\n\n\nRegister\n an account in fullcontact.\n\n\nLogin\n.\n\n\nIt will ask for mobile number verification, complete that.\n\n\nYou will be redirected to the page where you can get the API key.\n\n\nAdditionally you will also get one email in the registered email id with API details.\n\n\nCopy the API key and this is the value for \nfullcontact_api\n field in the config.py file. \n\n\n\n\nGoogle Custom Search Engine API key and CX id\n\n\n\n\nGo to https://console.developers.google.com/ \n Credentials\n\n\nClick on 'Create Credentials' and select API key. \n\n\nClick on restrict key. \n\n\nSelect HTTP Headers (Websites) radio button.\n\n\nAdd *\n.datasploit.info/*\n in restrictions. This is done in order to stop unintentional usage of your api key. \n\n\nCopy the API key and click on save button. This is the value for \ngoogle_cse_key\n field in the config.py file. \n\n\nGo to https://cse.google.com/cse/all, Click on Add button. \n\n\nIn sites to search box, enter \"pastebin.com\" and \"pastie.org\"\n\n\nGive any name to your search engine and click on Create button. \n\n\nGo to https://cse.google.com/cse/all again and click on the search engine you just created. \n\n\nClick on the 'Search engine id' button and copy your search engine id. This is the value for \ngoogle_cse_cx\n field in config.py file.\n\n\n\n\nSpyOnWeb Access Token\n\n\n\n\nRegister\n an account in SpyOnWeb.\n\n\nSpyOnWeb will send a confirmation email with a link you will need to use to confirm the account.\n\n\nLogin\n and your Access Token will be on the main page.\n\n\nCopy the Access Token and use as the value for the \nspyonweb_access_token\n field in the config.py file.\n\n\n\n\nZoomeye Username and Password\n\n\n\n\nRegister\n an user with zoomeye and use the credentials for this tool. (Don't worry if you are redirected to sso.telnet404.com. \nThis is how it works.)\n\n\nName of fields in the signup form -  \n1. email, 2. username, 3. nickname, 4. password, 5. confirm_password, 6. captcha\n\n\nOnce you fill out the details it will redirect you to the account page.\n\n\nThere you will found something: \n(Status: Inactive. Activate Now)\n\n\nClick on activate now and two fileds will be populated.\n\n\nThe first field will be captcha and the second one will be email id.\n\n\nOnce you fill the email id in the second text box, click on send activation code.\n\n\nCheck the activation code your email account.\n\n\nPut this activation code in the email id text box and click on determine.\n\n\nNow your account is activated and use those credentials in the tool.\n\n\nEmail ID which you have used to sign up is your username and is the value for \nzoomeyeuser\n field in config.py\n\n\nYour account password is the value for \nzoomeyepass\n field in the config.py\n\n\n\n\nTravis CI Access Token\n\n\n\n\nRegister\n an account with Github.\n\n\nLogin into Github (https://github.com/login) and go to the page 'New personal access token' (https://github.com/settings/tokens/new).\n\n\nGenerate a Github access token based on the instructions present at https://travispy.readthedocs.io/en/stable/getting_started/.\n\n\nCopy the Access Token and use as the value for the \ngithub_access_token\n field in the config.py file.", 
            "title": "How to Generate Api Keys"
        }, 
        {
            "location": "/apiGeneration/#shodan_api", 
            "text": "Register  an account in shodan.  Visit your registered email id and activate the account.  Login  to your account and you will find the API keys under profile overview tab.  Copy the API key and this is the value for  shodan_api  field in the config.py file.", 
            "title": "Shodan_api"
        }, 
        {
            "location": "/apiGeneration/#censysio-id-and-secret", 
            "text": "Register  an account in censysio.  Visit your registered email id and activate the account.  Login  to your account.  Visit  Account  tab to get API ID and Secret.  Your API key is the value for  censysio_id  field and API Secret is the value for  censysio_secret  field in config.py file.", 
            "title": "Censysio ID and Secret"
        }, 
        {
            "location": "/apiGeneration/#clearbit-api", 
            "text": "Register  an account in clearbit.  It will auto redirect to the account.  Visit  API keys  tab to get API key.  Copy the API key and this is the value for  clearbit_apikey  field in the config.py file.", 
            "title": "Clearbit API"
        }, 
        {
            "location": "/apiGeneration/#emailhunter-api", 
            "text": "Register  an account in emailhunter.  Click on activation link send to your registered email address and it will auto redirect to the account.  Visit  API keys  tab to get API key.  Copy the API key and this is the value for  emailhunter  field in the config.py file.", 
            "title": "Emailhunter API"
        }, 
        {
            "location": "/apiGeneration/#fullcontact-api", 
            "text": "Register  an account in fullcontact.  Login .  It will ask for mobile number verification, complete that.  You will be redirected to the page where you can get the API key.  Additionally you will also get one email in the registered email id with API details.  Copy the API key and this is the value for  fullcontact_api  field in the config.py file.", 
            "title": "Fullcontact API"
        }, 
        {
            "location": "/apiGeneration/#google-custom-search-engine-api-key-and-cx-id", 
            "text": "Go to https://console.developers.google.com/   Credentials  Click on 'Create Credentials' and select API key.   Click on restrict key.   Select HTTP Headers (Websites) radio button.  Add * .datasploit.info/*  in restrictions. This is done in order to stop unintentional usage of your api key.   Copy the API key and click on save button. This is the value for  google_cse_key  field in the config.py file.   Go to https://cse.google.com/cse/all, Click on Add button.   In sites to search box, enter \"pastebin.com\" and \"pastie.org\"  Give any name to your search engine and click on Create button.   Go to https://cse.google.com/cse/all again and click on the search engine you just created.   Click on the 'Search engine id' button and copy your search engine id. This is the value for  google_cse_cx  field in config.py file.", 
            "title": "Google Custom Search Engine API key and CX id"
        }, 
        {
            "location": "/apiGeneration/#spyonweb-access-token", 
            "text": "Register  an account in SpyOnWeb.  SpyOnWeb will send a confirmation email with a link you will need to use to confirm the account.  Login  and your Access Token will be on the main page.  Copy the Access Token and use as the value for the  spyonweb_access_token  field in the config.py file.", 
            "title": "SpyOnWeb Access Token"
        }, 
        {
            "location": "/apiGeneration/#zoomeye-username-and-password", 
            "text": "Register  an user with zoomeye and use the credentials for this tool. (Don't worry if you are redirected to sso.telnet404.com.  This is how it works.)  Name of fields in the signup form -   1. email, 2. username, 3. nickname, 4. password, 5. confirm_password, 6. captcha  Once you fill out the details it will redirect you to the account page.  There you will found something:  (Status: Inactive. Activate Now)  Click on activate now and two fileds will be populated.  The first field will be captcha and the second one will be email id.  Once you fill the email id in the second text box, click on send activation code.  Check the activation code your email account.  Put this activation code in the email id text box and click on determine.  Now your account is activated and use those credentials in the tool.  Email ID which you have used to sign up is your username and is the value for  zoomeyeuser  field in config.py  Your account password is the value for  zoomeyepass  field in the config.py", 
            "title": "Zoomeye Username and Password"
        }, 
        {
            "location": "/apiGeneration/#travis-ci-access-token", 
            "text": "Register  an account with Github.  Login into Github (https://github.com/login) and go to the page 'New personal access token' (https://github.com/settings/tokens/new).  Generate a Github access token based on the instructions present at https://travispy.readthedocs.io/en/stable/getting_started/.  Copy the Access Token and use as the value for the  github_access_token  field in the config.py file.", 
            "title": "Travis CI Access Token"
        }, 
        {
            "location": "/Usage/", 
            "text": "Datasploit allows you to perform OSINT on a domain_name, email_id, username and phoneNumber. In order to launch any script, lets first understand the nomenclature of these scripts:\n\n\n\n\nAll the scripts meant to perform osint on domain starts with the keyword \n'domain_'\n. Eg. domain_subdomains, domain_whois, etc. In similar manner, scripts for osint on email_id starts with \n'email_'\n, eg. email_fullcontact. \n\n\nScripts with an \nunderscore\n are standalone scripts and collects data of one specific kind. \n\n\nScripts without an underscore are the ones used for automated collection of data using standalone scripts. Eg. domainOsint.py\n\n\n\n\nIn order to run any script, pass the respective argument. For example, domainOsint and domain_subdomains.py will expect a domain name to be passed.\n\n\npython domainOsint.py -d example.com\npython domain_subdomains.py example.com\n\n\n\n\nWhile, domainOsint will call all other domain_* scripts and list down data as well as dump the same in mongoDb, domain_subdomains and other such scripts will just list down data specific to their function. \n\n\ndomainOsint.py generates a JSON report in reports folder as following hirarchy (example files are based on abcd.com domain)\n\n\npython domainOsint.py -d example.com -o json", 
            "title": "Usage"
        }, 
        {
            "location": "/contributors/", 
            "text": "Well, lets accept the fact that nothing goes well without contributors. Here is the list of people who have helped  (\n@datasploit\n) grow in its first phase. \n\n\nCore Contributors:\n\n\nFolks who took out time from busy schedule and got their hands dirty with the code:\n\n Shubham Mittal (\n@upgoingstar\n) \n\n Sudhanshu Chauhan (\n@upgoingstar\n)\n\n Kunal Aggarwal (\n@KunalAggarwal92\n)\n\n Nutan Kumar Panda (\n@nutankumarpanda\n)\n\n\nMentors:\n\n\nChaps who were generous enough to give feedback and suggest changes:\n\n Anant Srivastata (\n@anantshri\n)\n\n Prashant Mahajan (\n@prashant3535\n)\n* Shadab Siddiqui (\n@sh4ds1dd\n)\n\n\nTesters\n\n\nBelow people helped us by quickly adopting the tool and raised few naive issues we missed out:\n\n Sagar Belure (\n@sagarbelure\n)\n\n Chandrapal (\n@bnchandrapal\n)", 
            "title": "Contributors"
        }, 
        {
            "location": "/contributors/#core-contributors", 
            "text": "Folks who took out time from busy schedule and got their hands dirty with the code:  Shubham Mittal ( @upgoingstar )   Sudhanshu Chauhan ( @upgoingstar )  Kunal Aggarwal ( @KunalAggarwal92 )  Nutan Kumar Panda ( @nutankumarpanda )", 
            "title": "Core Contributors:"
        }, 
        {
            "location": "/contributors/#mentors", 
            "text": "Chaps who were generous enough to give feedback and suggest changes:  Anant Srivastata ( @anantshri )  Prashant Mahajan ( @prashant3535 )\n* Shadab Siddiqui ( @sh4ds1dd )", 
            "title": "Mentors:"
        }, 
        {
            "location": "/contributors/#testers", 
            "text": "Below people helped us by quickly adopting the tool and raised few naive issues we missed out:  Sagar Belure ( @sagarbelure )  Chandrapal ( @bnchandrapal )", 
            "title": "Testers"
        }, 
        {
            "location": "/roadmap/", 
            "text": "We are always in process of improving Datasploit as an OSINT framework so that it could help more and more people in their respective jobs. We realized there were some issues in installation and excpetion handling and we have resolved many of them. Having said that, we still have a lot more work to do. There is surely a large number of things which we think can be improved/added in datasploit. \n\n\nFollowing are few of the things we are planning to work on, in near future. If you think you have some idea/suggestions, please feel free to reach us on our Slack Channel \nhttps://datasploit.slack.com\n. (If you are not registered, you can http://selfinvite.datasploit.info). \n\n\nAnd if you think you can pick anything out of the following features/sources/enhancements, Well, what could be better? Please do send in your Pull Requests. Cheers. \n\n\nFeatures/Enhancement(s):\n\n\n\n\nCheck API keys before executing any module. This should be a framework level check. \n\n\nJSON/Txt outputs for every script.\n\n\nVisualization for the date that comes in. This could be done either in JPG images locally stored. Or setup a front end with Django/Flask/etc.\n\n\nOption to run DataSploit on a file containing a list of emails/domains/subdomains/usernames/etc. This will be an optional switch that will take file as --filename (-f) option. \n\n\nDump data in Sqlite3 (keys as one column and whole json document as value), and explore this option to be used as database. \n\n\n\n\nNew Source(s):\n\n\n\n\nInclude Twitter Sleeping time of a user. \n\n\nAdd https://urlquery.net\n\n\nExtract files, metadata and enumerate information from metadata\n\n\nMore sources for Username Enumeration : Include WhatsMyName by @WebBreacher\n\n\nLocate files for a domain on search engines like Google, Yahoo etc. This could be passed to metadata_extractor module. \n\n\nModule to find All Websites hosted on a domain's server.\n\n\nAdd AbuseIPDb\n\n\nReverse Image Search\n\n\nSearch on Darknet. \n\n\nCompany OSINT. Use Open-Corporates for this. User can pass a keyword for which a list of companies (with few details like location, Year of Est., etc.) matching the keyword will be listed. User needs to select the company he/she is targeting for complete search.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/roadmap/#featuresenhancements", 
            "text": "Check API keys before executing any module. This should be a framework level check.   JSON/Txt outputs for every script.  Visualization for the date that comes in. This could be done either in JPG images locally stored. Or setup a front end with Django/Flask/etc.  Option to run DataSploit on a file containing a list of emails/domains/subdomains/usernames/etc. This will be an optional switch that will take file as --filename (-f) option.   Dump data in Sqlite3 (keys as one column and whole json document as value), and explore this option to be used as database.", 
            "title": "Features/Enhancement(s):"
        }, 
        {
            "location": "/roadmap/#new-sources", 
            "text": "Include Twitter Sleeping time of a user.   Add https://urlquery.net  Extract files, metadata and enumerate information from metadata  More sources for Username Enumeration : Include WhatsMyName by @WebBreacher  Locate files for a domain on search engines like Google, Yahoo etc. This could be passed to metadata_extractor module.   Module to find All Websites hosted on a domain's server.  Add AbuseIPDb  Reverse Image Search  Search on Darknet.   Company OSINT. Use Open-Corporates for this. User can pass a keyword for which a list of companies (with few details like location, Year of Est., etc.) matching the keyword will be listed. User needs to select the company he/she is targeting for complete search.", 
            "title": "New Source(s):"
        }
    ]
}